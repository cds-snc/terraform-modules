/* 
* # GuardDuty Malware Protection for S3
*
* Sets up a GuardDuty Malware Protection plan for an S3 bucket.  This will asynchronously scan new objects in the specified S3 bucket for malware and tag the objects with a `GuardDutyMalwareScanStatus` scan verdict.
*
* It is expected that GuardDuty is already enabled in the region where this module is deployed.
*
* :warning: You are charged based on the number and size of the objects scanned.
*/

resource "aws_guardduty_malware_protection_plan" "this" {
  role = aws_iam_role.this.arn

  protected_resource {
    s3_bucket {
      bucket_name     = var.s3_bucket_name
      object_prefixes = length(var.s3_object_prefixes) > 0 ? var.s3_object_prefixes : null
    }
  }

  actions {
    tagging {
      status = var.tagging_status
    }
  }

  tags = local.common_tags
}

resource "aws_iam_role" "this" {
  name               = "MalwareS3-${var.s3_bucket_name}"
  assume_role_policy = data.aws_iam_policy_document.this_assume.json

  tags = local.common_tags
}

data "aws_iam_policy_document" "this_assume" {
  statement {
    actions = ["sts:AssumeRole"]
    effect  = "Allow"

    principals {
      type        = "Service"
      identifiers = ["malware-protection-plan.guardduty.amazonaws.com"]
    }
  }
}

resource "aws_iam_role_policy_attachment" "this" {
  role       = aws_iam_role.this.name
  policy_arn = aws_iam_policy.this.arn
}

resource "aws_iam_policy" "this" {
  name   = "MalwareS3-${var.s3_bucket_name}"
  path   = "/"
  policy = data.aws_iam_policy_document.this.json

  tags = local.common_tags
}

data "aws_iam_policy_document" "this" {

  statement {
    effect = "Allow"

    actions = [
      "s3:ListBucket",
      "s3:GetObject",
      "s3:PutObject",
      "s3:GetObjectTagging",
      "s3:GetObjectVersion",
      "s3:GetObjectVersionTagging",
      "s3:PutObjectTagging",
      "s3:PutObjectVersionTagging",
      "s3:PutBucketNotification",
      "s3:GetBucketNotification",

    ]

    resources = [
      local.s3_bucket_arn,
      "${local.s3_bucket_arn}/*"
    ]
  }

  statement {
    effect = "Allow"
    actions = [
      "events:PutRule",
      "events:DeleteRule",
      "events:PutTargets",
      "events:RemoveTargets"
    ]
    resources = [
      "arn:aws:events:${local.region}:${local.account_id}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*"
    ]

    condition {
      test     = "StringLike"
      variable = "events:ManagedBy"
      values   = ["malware-protection-plan.guardduty.amazonaws.com"]
    }
  }

  statement {
    effect = "Allow"
    actions = [
      "events:DescribeRule",
      "events:ListTargetsByRule"
    ]
    resources = [
      "arn:aws:events:${local.region}:${local.account_id}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*"
    ]
  }
}
