provider "aws" {
  region = "ca-central-1"
}

run "test_defaults" {
  command = plan

  variables {
    s3_bucket_name            = "a-bucket-that-will-be-scanned-for-malware"
    alarm_sns_topic_alarm_arn = "arn:aws:sns:ca-central-1:123456789012:MalwareS3-Alarm-a-bucket-that-will-be-scanned-for-malware"
    alarm_sns_topic_ok_arn    = "arn:aws:sns:ca-central-1:123456789012:MalwareS3-Ok-a-bucket-that-will-be-scanned-for-malware"
  }

  assert {
    condition     = aws_guardduty_malware_protection_plan.this.protected_resource[0].s3_bucket[0].bucket_name == "a-bucket-that-will-be-scanned-for-malware"
    error_message = "aws_guardduty_malware_protection_plan.this.protected_resource[0].s3_bucket[0].bucket_name did not match expected value"
  }

  assert {
    condition     = aws_guardduty_malware_protection_plan.this.actions[0].tagging[0].status == "ENABLED"
    error_message = "aws_guardduty_malware_protection_plan.this.actions[0].tagging[0].status did not match expected value"
  }

  assert {
    condition     = aws_cloudwatch_metric_alarm.malware_completed_scan_count[0].threshold == 10000
    error_message = "aws_cloudwatch_metric_alarm.malware_completed_scan_count[0].threshold did not match expected value"
  }

  assert {
    condition     = aws_cloudwatch_metric_alarm.malware_completed_scan_count[0].alarm_actions == toset(["arn:aws:sns:ca-central-1:123456789012:MalwareS3-Alarm-a-bucket-that-will-be-scanned-for-malware"])
    error_message = "aws_cloudwatch_metric_alarm.malware_completed_scan_count[0].alarm_actions did not match expected value"
  }

  assert {
    condition     = aws_cloudwatch_metric_alarm.malware_completed_scan_count[0].ok_actions == toset(["arn:aws:sns:ca-central-1:123456789012:MalwareS3-Ok-a-bucket-that-will-be-scanned-for-malware"])
    error_message = "aws_cloudwatch_metric_alarm.malware_completed_scan_count[0].ok_actions did not match expected value"
  }

  assert {
    condition     = aws_cloudwatch_metric_alarm.malware_completed_scan_bytes[0].threshold == 2147483648
    error_message = "aws_cloudwatch_metric_alarm.malware_completed_scan_bytes[0].threshold did not match expected value"
  }
}

run "test_overrides" {
  command = plan

  variables {
    alarms_enabled     = false
    s3_bucket_name     = "another-bucket-that-will-be-scanned-for-malware"
    s3_object_prefixes = ["only-scan-this-folder/"]
    tagging_status     = "DISABLED"
  }

  assert {
    condition     = aws_guardduty_malware_protection_plan.this.protected_resource[0].s3_bucket[0].bucket_name == "another-bucket-that-will-be-scanned-for-malware"
    error_message = "aws_guardduty_malware_protection_plan.this.protected_resource[0].s3_bucket[0].bucket_name did not match expected value"
  }

  assert {
    condition     = aws_guardduty_malware_protection_plan.this.protected_resource[0].s3_bucket[0].object_prefixes == toset(["only-scan-this-folder/"])
    error_message = "aws_guardduty_malware_protection_plan.this.protected_resource[0].s3_bucket[0].object_prefixes did not match expected value"
  }

  assert {
    condition     = aws_guardduty_malware_protection_plan.this.actions[0].tagging[0].status == "DISABLED"
    error_message = "aws_guardduty_malware_protection_plan.this.actions[0].tagging[0].status did not match expected value"
  }

  assert {
    condition     = length(aws_cloudwatch_metric_alarm.malware_completed_scan_count) == 0
    error_message = "aws_cloudwatch_metric_alarm.malware_completed_scan_count should not exist when alarms_enabled is false"
  }

  assert {
    condition     = length(aws_cloudwatch_metric_alarm.malware_completed_scan_bytes) == 0
    error_message = "aws_cloudwatch_metric_alarm.malware_completed_scan_bytes should not exist when alarms_enabled is false"
  }
}
